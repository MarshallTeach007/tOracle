{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","storageLogString","accounts","PriceConsumerContract","FuckTokenContract","TestTokenContract","FuckTokenAccountCoins","TestTokenAccountCoins","signerAddress1","signerAddress2","dexAddress","componentDidMount","eth","getAccounts","net","getId","networkId","eDeployedNetwork","PriceConsumer","networks","exChangeInstance","Contract","abi","address","setState","RunInit","info","alert","error","toString","_address","test","methods","getLatestPrice","send","from","price","this","className","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAsCeA,EApCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAEhC,+DAEEP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA5BoB,8DCsFrBQ,G,iNApFXC,MAAQ,CACJC,iBAAkB,GAClBV,KAAM,KACNW,SAAU,KACVC,sBAAuB,KACvBC,kBAAmB,KACnBC,kBAAmB,KACnBC,sBAAuB,KACvBC,sBAAuB,KACvBC,eAAgB,6CAChBC,eAAgB,6CAChBC,WAAY,8C,EAGhBC,kB,sBAAoB,oCAAAtB,EAAA,+EAGON,IAHP,cAGNQ,EAHM,gBAMWA,EAAKqB,IAAIC,cANpB,cAMNX,EANM,gBASYX,EAAKqB,IAAIE,IAAIC,QATzB,OASNC,EATM,OAWNC,EAAmBC,EAAcC,SAASH,GAC1CI,EAAmB,IAAI7B,EAAKqB,IAAIS,SAClCH,EAAcI,IACdL,GAAoBA,EAAiBM,SAMzC,EAAKC,SAAS,CACVjC,KAAMA,EACNW,SAAUA,EACVC,sBAAuBiB,GAExB,EAAKK,SAER/B,QAAQgC,KAAK,aAAcV,GA3Bf,kDA8BZW,MAAM,0EAGNjC,QAAQkC,MAAR,MAjCY,QAoChBlC,QAAQgC,KAAK,WAAY,EAAK1B,MAAME,SAAS,IAC7CR,QAAQgC,KAAK,cAAe,EAAK1B,MAAMU,WAAWmB,YAClDnC,QAAQgC,KAAK,kBAAmB,EAAK1B,MAAMQ,eAAeqB,YAC1DnC,QAAQgC,KAAK,kBAAmB,EAAK1B,MAAMS,eAAeoB,YAC1DnC,QAAQgC,KAAK,yBAA0B,EAAK1B,MAAMG,sBAAsB2B,UAxCxD,0D,EA4CpBL,Q,sBAAU,sBAAApC,EAAA,0F,EAIV0C,K,sBAAO,kCAAA1C,EAAA,+DACuC,EAAKW,MAAxCE,EADJ,EACIA,SAAUC,EADd,EACcA,sBADd,SAEeA,EAAsB6B,QAAQC,eAAe9B,EAAsB2B,SAASD,WAAY,KAAKK,KAAK,CAACC,KAAMjC,EAAS,KAFjI,OAECkC,EAFD,OAGH1C,QAAQgC,KAAK,SAAUU,GAHpB,2C,wEAQH,OAAKC,KAAKrC,MAAMT,KAIZ,yBAAK+C,UAAU,OAEX,0CACA,4BAAQC,QAASF,KAAKN,MAAtB,UANG,4E,GAxEDS,cCMEC,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dcac4b2b.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          // \"http://0.0.0.0:8545\"\n            \"https://kovan.infura.io/v3/f8b4397c14484aa382dd9b96412e1db9\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, {Component} from \"react\";\nimport PriceConsumer from \"./contracts/PriceConsumer.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        storageLogString: '',\n        web3: null,\n        accounts: null,\n        PriceConsumerContract: null,\n        FuckTokenContract: null,\n        TestTokenContract: null,\n        FuckTokenAccountCoins: null,\n        TestTokenAccountCoins: null,\n        signerAddress1: '0x5D59C0b6C9B13E8c55145B86327C84938cBF1418',\n        signerAddress2: '0x2576BD94dd46980c9D1Cec53481a306649fe49cc',\n        dexAddress: '0xB9F8Bb65D295273424CAC7792104E064038AB066'\n    };\n\n    componentDidMount = async () => {\n        try {\n            // Get network provider and web3 instance.\n            const web3 = await getWeb3();\n\n            // Use web3 to get the user's accounts.\n            const accounts = await web3.eth.getAccounts();\n\n            // Get the contract instance.\n            const networkId = await web3.eth.net.getId();\n\n            const eDeployedNetwork = PriceConsumer.networks[networkId];\n            const exChangeInstance = new web3.eth.Contract(\n                PriceConsumer.abi,\n                eDeployedNetwork && eDeployedNetwork.address,\n            );\n\n\n            // Set web3, accounts, and contract to the state, and then proceed with an\n            // example of interacting with the contract's methods.\n            this.setState({\n                web3: web3,\n                accounts: accounts,\n                PriceConsumerContract: exChangeInstance,\n\n            }, this.RunInit);\n\n            console.info(\"networkId:\", networkId);\n        } catch (error) {\n            // Catch any errors for any of the above operations.\n            alert(\n                `Failed to load web3, accounts, or contract. Check console for details.`,\n            );\n            console.error(error);\n        }\n\n        console.info(\"calller:\", this.state.accounts[0]);\n        console.info(\"dexAddress:\", this.state.dexAddress.toString());\n        console.info(\"signerAddress1:\", this.state.signerAddress1.toString());\n        console.info(\"signerAddress2:\", this.state.signerAddress2.toString());\n        console.info(\"PriceConsumerContract:\", this.state.PriceConsumerContract._address);\n\n    };\n\n    RunInit = async () => {\n\n    };\n\n    test = async () => {\n        const {accounts, PriceConsumerContract} = this.state;\n        let price = await PriceConsumerContract.methods.getLatestPrice(PriceConsumerContract._address.toString(), 100).send({from: accounts[0]});\n        console.info(\"price:\", price);\n    };\n\n\n    render() {\n        if (!this.state.web3) {\n            return <div>Loading Web3, accounts, and contract...</div>;\n        }\n        return (\n            <div className=\"App\">\n\n                <h1>acc1 test:</h1>\n                <button onClick={this.test}> test</button>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}